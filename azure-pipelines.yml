# Pipeline for testing DLHyperparameterTuning Pipeline

trigger:
  batch: true
  branches:
    include:
    - master
    - staging

pr: none

variables:
- group: AzureKeyVault

jobs:
- job: AKSDeployAMLJob
  timeoutInMinutes: 300
  cancelTimeoutInMinutes: 2
  pool:
    name: AKSDeployment
    vmImage: 'GpuSelfHostedAgent'

  steps:
  - script: echo Hello, HyperdriveDeepLearning!
    displayName: 'Builds source for https://github.com/microsoft/HyperdriveDeepLearning/'

  - bash: |
      #sudo usermod -aG docker $USER
      #newgrp docker

      conda remove -n TorchDetectAML --all -q --force -y

      echo Create Conda Environment
      conda env create -f environment.yml

      conda env list
      source activate TorchDetectAML
      conda env list
      
      echo Get Data Files 
      cd scripts
      git clone https://github.com/cocodataset/cocoapi.git
      cd cocoapi/PythonAPI
      make
      cd ../../..
    displayName: 'Prepare Environment'

  - bash: |
      source activate TorchDetectAML
      
      echo Login Azure Account
      az login -t $(sptenent) --service-principal -u $(spidentity) --password $(spsecret)
      az account set --subscription $(subscriptionid)
    displayName: 'Azure Login SP'

  - bash: |
      source activate TorchDetectAML
      echo Executing 00_AMLConfiguration_output.ipynb
      papermill 00_AMLConfiguration.ipynb 00_AMLConfiguration_output.ipynb --log-output --no-progress-bar -k python3 -p subscription_id $(subscriptionid) -p resource_group $(azureresourcegroup) -p workspace_name $(workspacename) -p workspace_region $(azureregion)
    displayName: '00_AMLConfiguration_output.ipynb'

  - bash: |
      source activate TorchDetectAML
      echo Executing 01_PrepareTrainingScript.ipynb
      papermill 01_PrepareTrainingScript.ipynb 01_PrepareTrainingScript_output.ipynb --log-output --no-progress-bar -k python3
    displayName: '01_PrepareTrainingScript.ipynb'

  - bash: |
      source activate TorchDetectAML
      echo Executing 02_PytorchEstimatorLocalRun.ipynb
      papermill 02_PytorchEstimatorLocalRun.ipynb 02_PytorchEstimatorLocalRun_output.ipynb --log-output --no-progress-bar -k python3 -p num_epochs 1
    displayName: '02_PytorchEstimatorLocalRun.ipynb'

  - bash: |
      source activate TorchDetectAML
      echo Executing 03_BuildDockerImage.ipynb
      papermill 03_BuildDockerImage.ipynb 03_BuildDockerImage_output.ipynb --log-output --no-progress-bar -k python3 -p image_name 'torchdet' -p acr_resource_group $(azureresourcegroup) -p acr_location $(azureregion) -p acr_name $(acrname)
    displayName: '03_BuildDockerImage.ipynb'

  - bash: |
      source activate TorchDetectAML
      echo Executing 04_TuneHyperparameters.ipynb
      papermill 04_TuneHyperparameters.ipynb 04_TuneHyperparameters_output.ipynb --log-output --no-progress-bar -k python3 -p cluster_name  $(clustername) -p num_epochs 1 -p max_total_runs 2
    displayName: '04_TuneHyperparameters.ipynb'
    
  - bash: |
      source activate TorchDetectAML
      echo Executing 05_TrainWithAMLPipeline.ipynb
      papermill 05_TrainWithAMLPipeline.ipynb 05_TrainWithAMLPipeline_output.ipynb --log-output --no-progress-bar -k python3 -p num_epochs 1 -p max_total_runs 2
    displayName: '05_TrainWithAMLPipeline.ipynb'

  - bash: |
      echo Remove All Docker Containers
      docker stop $(docker ps -a -q)
      docker rm $(docker ps -a -q)
      docker rmi $(docker images -q)

      echo Remove Conda Environment
      conda remove -n TorchDetectAML --all -q --force -y
      conda env list

      echo Ensure Resource Group Deletion
      existResponse=$(az group exists -n $(azureresourcegroup))
      if [ "$existResponse" == "true" ]; then
        echo Deleting project resource group
        az group delete --name $(azureresourcegroup) --yes
      else
        echo Project resource group did not exist
      fi
      echo Done Cleanup
    displayName: 'Cleanup Task'
    condition: always()

  - task: CreateWorkItem@1
    inputs:
      workItemType: 'Issue'
      title: $(System.TeamProject) - Build $(Build.BuildNumber) Failed
      assignedTo: 'Fidan Boylu Uz <fboylu@microsoft.com>'
      associate: true
      teamProject: $(System.TeamProject)

      fieldMappings: |
        Description=Branch: Branch $(Build.SourceBranch) failed to build. Go to Boards>WorkItems and tag the failure type.
    displayName: 'Create work item on failure'
    condition: failed()    
